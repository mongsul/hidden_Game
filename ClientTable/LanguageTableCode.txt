Function ExportToFile(MainSheet As Worksheet, CopyFromSheet As Worksheet, StartFromSheetRow As Integer) As Boolean
    '인자 값으로 들어온 시트 내용을 .xls 파일로 익스포트 해주는 함수
    ExportToFile = True
    
    Dim FileToSave As Workbook '저장할 워크북
    Dim SavePath As String '저장할 워크북의 경로
    Dim LoopStr As String '반복문에서 체크할 워크북의 경로
    SavePath = ThisWorkbook.Path & "\" & CopyFromSheet.Name & ".xls" '현재 워크북 경로에 인자값의 시트 이름 값을 설정해준다.
    Dim i As Integer '반복문 돌릴 변수
    
    '불러올 엑셀 파일이 이미 열려있는가를 체크
    For i = 1 To Workbooks.Count
        If Workbooks(i).FullName = SavePath Then ' & ".xls"
            ExportToFile = False '파일이 열려있어서 저장 실패
            Exit Function
            Exit For '이미 열려있을 경우 반복문 탈출
        End If
    Next
    
    Set FileToSave = Workbooks.Add '워크북 목록에서 추가한 변수값 설정
    Dim NewSheet As Worksheet
    Set NewSheet = FileToSave.Sheets(1) '새로 생성된 워크북의 첫번째 시트 가져온다.
    NewSheet.Name = "meta_table" '시트 이름 값 고정
    
    Dim EndRow As Integer '복사 끝나는 행 값
    Dim EndColumn '복사 끝나는 열 값
    Dim ToRowValue As Integer '값 설정해주는 쪽의 행 값
    Dim IsFind As Boolean '비어있는 값을 찾았는가 여부
    Dim CommentColumn() As Integer '주석으로 사용할 열 값 목록
    Dim CommentCheckCount As Integer '주석 열 목록 체크 카운트 값
    Dim IsExistCommentColumn As Boolean '주석 열 값이 하나라도 존재하는가 여부
    Dim CommentColumnMax As Integer '주석 열 값 최대 값 수
    Dim ColumnCheckString As String '주석 열 값 체크용 변수
    Dim IsNowCommentColumn As Boolean '현재 열이 주석 열값인가 체크용 변수
    
    '행 값 검색
    i = 1
    IsFind = False
    While IsFind = False
        
        If CopyFromSheet.Cells(i, 1) = "" Then
            EndRow = i
            IsFind = True
        End If
        
        i = i + 1
    Wend
    
    '열 값 검색 - 이 때 주석 열 체크 한다.
    CommentColumnMax = 0
    IsExistCommentColumn = False
    i = 1
    IsFind = False
    
    'Is Find 값이 True가 될 때까지 반복문 실행
    While IsFind = False
    
        IsNowCommentColumn = False
    
        ColumnCheckString = CopyFromSheet.Cells(1, i)
        If InStr(1, ColumnCheckString, "*", vbBinaryCompare) = 1 Then
            '첫번째 열 항목이 *로 시작할 경우, 해당 열은 Export시 포함하지 않는다.
            ReDim Preserve CommentColumn(CommentColumnMax) '배열 개수 설정
            CommentColumn(CommentColumnMax) = i '배열에 값 설정
            CommentColumnMax = CommentColumnMax + 1
            IsNowCommentColumn = True
        End If
    
        If CopyFromSheet.Cells(StartFromSheetRow, i) = "" Then
            EndColumn = i
            
            If IsNowCommentColumn = False Then
                IsFind = True
            End If
        'Else
        End If
        
        i = i + 1
    Wend
    
    '주석 사용 열 존재 여부 값 설정
    If CommnetColumnMax > 0 Then
        IsExistCommentColumn = True
    End If
    
    '값 정보는 전부 텍스트
    NewSheet.Range(NewSheet.Cells(1, 1), NewSheet.Cells(EndRow - StartFromSheetRow + 1, EndColumn)).NumberFormatLocal = "@"
    
    Dim IsSetToCell As Boolean '셀에 값을 설정하는가 여부
    
    For i = StartFromSheetRow To EndRow
        ToRowValue = i - StartFromSheetRow + 1 '행 값 계산
        CommentCheckCount = 0 '주석 사용 열 값 초기화
        For j = 1 To EndColumn
            IsSetToCell = True '값 True로 초기화
            
            '해당 열이 주석열인가 체크 한다.
            If CommentCheckCount < CommentColumnMax Then '최대 값 체크
                If CommentColumn(CommentCheckCount) = j Then
                    '열 값이 동일할 경우 처리
                    IsSetToCell = False
                    CommentCheckCount = CommentCheckCount + 1 '카운트 값 +1처리
                End If
            End If
            
            If IsSetToCell = True Then
                NewSheet.Cells(ToRowValue, j - CommentCheckCount) = CopyFromSheet.Cells(i, j) '셀 값 설정
            End If
        Next
    Next
    
    FileToSave.SaveAs Filename:=SavePath, FileFormat:=xlWorkbookNormal '워크북 저장
    FileToSave.Close '저장한 워크북 닫아준다.
    
End Function

Function ExportToLocalizeRowCSV(MainSheet As Worksheet, UseColumnIndex As Integer, StartRowIndex As Integer, KeyTitle As String, ValueTitle As String) As Boolean
    '인자 값으로 들어온 시트 내용을 .csv 파일로 익스포트 해주는 함수 - 행별 처리. ExportToLocalizeCSV 함수에서 호출됨
    Dim i As Long
    Dim str As String
    Dim NewLine As String
    Dim ado1 As Object
    
    NewLine = Chr(13) & Chr(10) '다음줄 문자열
    
    'ADODB 설정
    Set ado1 = CreateObject("ADODB.Stream")
    ado1.Type = 2 'adTypeBinary
    ado1.Charset = "UTF-8"
    'ado1.LineSeparator = adLF '개행 코드를 LF로 지정(에러나서 주석처리)
    ado1.Open
    
    '첫줄 내용 채우기. 항목 변수 이름 StringValue로 고정
    str = KeyTitle & "," & ValueTitle & NewLine
    ado1.WriteText str, adWriteLine '파일에 내용 추가
    
    '마지막 행까지 반복
    For i = StartRowIndex + 1 To MainSheet.UsedRange.Rows.Count
        If MainSheet.Cells(i, 1) <> "" Then
            str = MainSheet.Cells(i, 1) & ",""" & MainSheet.Cells(i, UseColumnIndex) & """" & NewLine '내용 = 키값, "문자열"
            ado1.WriteText str, adWriteLine '파일에 내용 추가
        End If
    Next
    
    'BOM을 지우기 전 처리
    ado1.Position = 0 '파일 선두로 세팅
    ado1.Type = 2 'adTypeBinary '바이너리로 변경
    'ado1.Position = 3 'BOM의 3바이트 만큼 스킵

    'BOM을 지운것을 복사
    'Set ado2 = CreateObject("ADODB.Stream")
    'ado2.Type = 2 'adTypeBinary
    'ado2.Open
    'ado1.CopyTo ado2
    'ado1.WriteText = str
    'ado1.SaveToFile Replace(ThisWorkbook.FullName, ".xlsm", ".csv"), 2
    ado1.SaveToFile ThisWorkbook.Path & "\" & MainSheet.Cells(StartRowIndex, UseColumnIndex) & ".csv", 2 '첫번째 행의 사용하는 열의 문자열 값을 파일명으로 사용한다.
    
    '오브젝트 닫기 처리
    ado1.Close
    'ado2.Close
    
    ExportToLocalizeRowCSV = True
    
End Function

Function ExportToLocalizeCSV(MainSheet As Worksheet, StartRowIndex As Integer, KeyTitle As String, ValueTitle As String) As Boolean
    '인자 값으로 들어온 시트 내용을 .csv 파일로 익스포트 해주는 함수

    Dim i As Integer
    Dim IsFail As Boolean
    IsFail = False
    
    For i = 2 To MainSheet.UsedRange.Columns.Count
        If MainSheet.Cells(1, i) = "" Then
            Exit For
        End If
        
        If ExportToLocalizeRowCSV(MainSheet, i, StartRowIndex, KeyTitle, ValueTitle) = False Then
            IsFail = True
        End If
    Next
    
    ExportToLocalizeCSV = IsFail

End Function

Sub ExportToServerData()
    Dim LoopSheet As Worksheet 'for문 안에서 설정해줄 시트 변수
    Dim IsExistError As Boolean '에러 발생 여부
    Dim StartFromSheetRow As Integer '정보 입력 시작 줄 값
    Dim KeyTitle As String '키 타이틀 명
    Dim ValueTitle As String '값 타이틀 명
    IsExistError = False
    
    ActiveWorkbook.Save '시작 전 저장처리
    
    '어플리케이션 설정
    Application.SheetsInNewWorkbook = 1 '시트는 하나 (원래는 3개로 생성됨)
    Application.DisplayAlerts = False '경고창 출력 설정 안보이게 설정
    
    '속도 향상을 위한 코드
    Application.ScreenUpdating = False '매크로 실행되는 동안 화면 업데이트 안함
    Application.Calculation = xlCalculationManual '자동으로 실행하는 전체 수식 계산을 중단
    Application.EnableEvents = False '이벤트 중지
    
    StartFromSheetRow = ActiveSheet.Cells(2, 2) '정보 입력 시작 줄 값 받아옴
    KeyTitle = ActiveSheet.Cells(4, 2)
    ValueTite = ActiveSheet.Cells(5, 2)
    
    Dim EndCount As Integer 'for문 끝내는 값 (디버그용)
    'EndCount = 3
    EndCount = ActiveWorkbook.Sheets.Count
    
    For i = 1 To EndCount
        Set LoopSheet = ActiveWorkbook.Sheets(i)
        If LoopSheet.Name <> ActiveSheet.Name Then
            '현재 이 매크로를 실행한 시트가 아닐 경우 저장 처리
            If ExportToFile(ActiveSheet, LoopSheet, StartFromSheetRow) = False Then
                IsExistError = True '에러 처리
                Exit For '저장 실패했을 경우 반복문 탈출
            End If
        End If
    Next
    
    Application.DisplayAlerts = True '경고창 출력 설정 다시 보이게 설정
    
    '속도 향상을 위해서 실행했던 상태 설정을 원래대로 해준다.
    Application.ScreenUpdating = True '매크로 실행되는 동안 화면 업데이트 다시 실행
    Application.Calculation = xlCalculationAutomatic '자동으로 실행하는 전체 수식 계산을 개시
    Application.EnableEvents = True '이벤트 다시 실행
    
    If IsExistError = True Then
        '에러가 있을 경우, 저장 실패의 원인을 알려준다. (일단은, 파일이 열려있을 경우만 처리되어 있음.)
        MsgBox "엑셀 파일 " & LoopSheet.Name & "이 열려있기 때문에 저장에 실패했습니다!" & Chr(13) & Chr(10) & "파일을 닫고 다시 시도해주세요!"
        Exit Sub
    End If

    MsgBox "파일 저장이 완료되었습니다!"
End Sub

Sub ExportToOnlyClientLocalize()
    Dim LoopSheet As Worksheet 'for문 안에서 설정해줄 시트 변수
    Dim LocalizeSheetName As String
    Dim IsExistError As Boolean '에러 발생 여부
    Dim StartFromSheetRow As Integer '정보 입력 시작 줄 값
    Dim KeyTitle As String '키 타이틀 명
    Dim ValueTitle As String '값 타이틀 명
    
    StartFromSheetRow = ActiveSheet.Cells(2, 2) '정보 입력 시작 줄 값 받아옴
    LocalizeSheetName = ActiveSheet.Cells(3, 2)
    KeyTitle = ActiveSheet.Cells(4, 2)
    ValueTitle = ActiveSheet.Cells(5, 2)
    
    ActiveWorkbook.Save '시작 전 저장처리
    
    For i = 1 To ActiveWorkbook.Sheets.Count
        Set LoopSheet = ActiveWorkbook.Sheets(i)
        If LoopSheet.Name = LocalizeSheetName Then
            IsExistError = ExportToLocalizeCSV(LoopSheet, StartFromSheetRow, KeyTitle, ValueTitle)
            Exit For 'csv 저장 후 반복문 탈출
        End If
    Next
    
    MsgBox "csv 저장이 완료되었습니다!"
End Sub

